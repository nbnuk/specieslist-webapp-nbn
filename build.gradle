buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:7.0.5"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.2.4"
    }
}

version "4.0.3-NBN-0-0-0-SNAPSHOT"
group "uk.org.nbn"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"maven-publish"

//apply from: 'https://raw.githubusercontent.com/nbnuk/travis-build-configuration/master/travis_grails_publish.gradle'

publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://repository.gbif.org/repository/${project.version.endsWith('-SNAPSHOT') ? 'uk-nbn-snapshots' : 'uk-nbn-releases'}"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }
    publications {
        mavenJar(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            from components.web
        }
    }
}

repositories {
    mavenLocal()
    maven { url "https://repository.gbif.org/repository/uk-nbn-releases/" }
    maven { url "https://repository.gbif.org/repository/uk-nbn-snapshots/" }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

// Set to true it needed only for development
boolean inplace = false

if (inplace) {
    grails {
        exploded = false
        plugins {
            compile project(':specieslist-webapp')
        }
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.18.Final"
    compile "org.hibernate:hibernate-ehcache:5.4.9.Final"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.1"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.2.4"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
    testCompile "org.seleniumhq.selenium:selenium-api:3.14.0"
    testCompile "org.seleniumhq.selenium:selenium-support:3.14.0"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"

    //ALA
    if(!inplace) {
        compile ("au.org.ala:specieslist-webapp:4.0.3-NBN-PLUGIN-0-0-0-SNAPSHOT"){
            exclude group: "au.org.ala.names", module: "ala-namematching-client"
        }
    }
    compile ("au.org.ala.names:ala-namematching-client:1.7-NBN-0-0-0-SNAPSHOT") {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    compile "org.grails.plugins:external-config:2.0.0"
    runtime "mysql:mysql-connector-java:8.0.23"
    runtime 'org.cache2k:cache2k-jcache:1.2.0.Final'
    runtime "org.grails.plugins:ala-bootstrap3:4.1.0"
    //runtime "org.grails.plugins:ala-bootstrap3:3.2.1"
    runtime ("org.grails.plugins:ala-admin-plugin:2.3.0") {
        exclude module: "cache"
    }
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}


//webdriverBinaries {
//    chromedriver '2.45.0'
//    geckodriver '0.24.0'
//}
//
//tasks.withType(Test) {
//    systemProperty "geb.env", System.getProperty('geb.env')
//    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
//    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
//    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
//}


assets {
    minifyJs = true
    minifyCss = true
}
